def matrix_k(b_k):
    m =[[6,0,0,b_k],[0,2,0,0],[0,0,1,0],[0,0,0,1]]
    return m

def matrix_kMinus1():
    m = [[-6,0,0,0],[-6,-2,0,0],[-3,-2,-1,0],[-1,-1,-1,-1]]
    return m


def makeAMatrix():
    systemSize = N
    A = np.zeros((4*systemSize, 4*systemSize))
    for k in range(systemSize):
        A[4*k:4*(k+1),4*k:4*(k+1)] = matrix_k(b_k) # Usikker paa om matrisen skrives som vi vil
        if (k==0):
            A[0:4,3*systemSize:4*systemSize] = matrix_kMinus1()
        else:
            A[4*k:4*(k+1),4*(k-1):4*k] = matrix_kMinus1()
    return A

def makeuMatrix():
    systemSize = N
    u = np.zeros(systemSize * 4)
    for k in range(systemSize):
        u[4*k:4*(k+1)] = [-alfa, -alfa / 2, -alfa / 6, -alfa / 24]
    return u


def solve():
    u = makeuMatrix()
    A = makeAMatrix()
    #print(A)
    #print(u)
    x = np.linalg.solve(A, u)
    #print(x)
    return x
